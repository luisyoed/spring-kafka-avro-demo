/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.curso.avro.kafka.spkafkaavrodemo.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockHistory extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8474354395214297792L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockHistory\",\"namespace\":\"com.curso.avro.kafka.spkafkaavrodemo.schema\",\"fields\":[{\"name\":\"studentId\",\"type\":\"int\",\"default\":-1},{\"name\":\"registrationNumber\",\"type\":\"int\",\"default\":-1},{\"name\":\"city\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"tuitionCost\",\"type\":\"float\",\"default\":-100.0},{\"name\":\"monthlyPayment\",\"type\":\"float\",\"default\":-100.0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockHistory> ENCODER =
      new BinaryMessageEncoder<StockHistory>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockHistory> DECODER =
      new BinaryMessageDecoder<StockHistory>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StockHistory> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StockHistory> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockHistory>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StockHistory to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StockHistory from a ByteBuffer. */
  public static StockHistory fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int studentId;
  @Deprecated public int registrationNumber;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence lastName;
  @Deprecated public float tuitionCost;
  @Deprecated public float monthlyPayment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockHistory() {}

  /**
   * All-args constructor.
   * @param studentId The new value for studentId
   * @param registrationNumber The new value for registrationNumber
   * @param city The new value for city
   * @param name The new value for name
   * @param lastName The new value for lastName
   * @param tuitionCost The new value for tuitionCost
   * @param monthlyPayment The new value for monthlyPayment
   */
  public StockHistory(java.lang.Integer studentId, java.lang.Integer registrationNumber, java.lang.CharSequence city, java.lang.CharSequence name, java.lang.CharSequence lastName, java.lang.Float tuitionCost, java.lang.Float monthlyPayment) {
    this.studentId = studentId;
    this.registrationNumber = registrationNumber;
    this.city = city;
    this.name = name;
    this.lastName = lastName;
    this.tuitionCost = tuitionCost;
    this.monthlyPayment = monthlyPayment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return studentId;
    case 1: return registrationNumber;
    case 2: return city;
    case 3: return name;
    case 4: return lastName;
    case 5: return tuitionCost;
    case 6: return monthlyPayment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: studentId = (java.lang.Integer)value$; break;
    case 1: registrationNumber = (java.lang.Integer)value$; break;
    case 2: city = (java.lang.CharSequence)value$; break;
    case 3: name = (java.lang.CharSequence)value$; break;
    case 4: lastName = (java.lang.CharSequence)value$; break;
    case 5: tuitionCost = (java.lang.Float)value$; break;
    case 6: monthlyPayment = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'studentId' field.
   * @return The value of the 'studentId' field.
   */
  public java.lang.Integer getStudentId() {
    return studentId;
  }

  /**
   * Sets the value of the 'studentId' field.
   * @param value the value to set.
   */
  public void setStudentId(java.lang.Integer value) {
    this.studentId = value;
  }

  /**
   * Gets the value of the 'registrationNumber' field.
   * @return The value of the 'registrationNumber' field.
   */
  public java.lang.Integer getRegistrationNumber() {
    return registrationNumber;
  }

  /**
   * Sets the value of the 'registrationNumber' field.
   * @param value the value to set.
   */
  public void setRegistrationNumber(java.lang.Integer value) {
    this.registrationNumber = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'tuitionCost' field.
   * @return The value of the 'tuitionCost' field.
   */
  public java.lang.Float getTuitionCost() {
    return tuitionCost;
  }

  /**
   * Sets the value of the 'tuitionCost' field.
   * @param value the value to set.
   */
  public void setTuitionCost(java.lang.Float value) {
    this.tuitionCost = value;
  }

  /**
   * Gets the value of the 'monthlyPayment' field.
   * @return The value of the 'monthlyPayment' field.
   */
  public java.lang.Float getMonthlyPayment() {
    return monthlyPayment;
  }

  /**
   * Sets the value of the 'monthlyPayment' field.
   * @param value the value to set.
   */
  public void setMonthlyPayment(java.lang.Float value) {
    this.monthlyPayment = value;
  }

  /**
   * Creates a new StockHistory RecordBuilder.
   * @return A new StockHistory RecordBuilder
   */
  public static com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder newBuilder() {
    return new com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder();
  }

  /**
   * Creates a new StockHistory RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockHistory RecordBuilder
   */
  public static com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder newBuilder(com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder other) {
    return new com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder(other);
  }

  /**
   * Creates a new StockHistory RecordBuilder by copying an existing StockHistory instance.
   * @param other The existing instance to copy.
   * @return A new StockHistory RecordBuilder
   */
  public static com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder newBuilder(com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory other) {
    return new com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder(other);
  }

  /**
   * RecordBuilder for StockHistory instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockHistory>
    implements org.apache.avro.data.RecordBuilder<StockHistory> {

    private int studentId;
    private int registrationNumber;
    private java.lang.CharSequence city;
    private java.lang.CharSequence name;
    private java.lang.CharSequence lastName;
    private float tuitionCost;
    private float monthlyPayment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.studentId)) {
        this.studentId = data().deepCopy(fields()[0].schema(), other.studentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.registrationNumber)) {
        this.registrationNumber = data().deepCopy(fields()[1].schema(), other.registrationNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastName)) {
        this.lastName = data().deepCopy(fields()[4].schema(), other.lastName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tuitionCost)) {
        this.tuitionCost = data().deepCopy(fields()[5].schema(), other.tuitionCost);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.monthlyPayment)) {
        this.monthlyPayment = data().deepCopy(fields()[6].schema(), other.monthlyPayment);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StockHistory instance
     * @param other The existing instance to copy.
     */
    private Builder(com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.studentId)) {
        this.studentId = data().deepCopy(fields()[0].schema(), other.studentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.registrationNumber)) {
        this.registrationNumber = data().deepCopy(fields()[1].schema(), other.registrationNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastName)) {
        this.lastName = data().deepCopy(fields()[4].schema(), other.lastName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tuitionCost)) {
        this.tuitionCost = data().deepCopy(fields()[5].schema(), other.tuitionCost);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.monthlyPayment)) {
        this.monthlyPayment = data().deepCopy(fields()[6].schema(), other.monthlyPayment);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'studentId' field.
      * @return The value.
      */
    public java.lang.Integer getStudentId() {
      return studentId;
    }

    /**
      * Sets the value of the 'studentId' field.
      * @param value The value of 'studentId'.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder setStudentId(int value) {
      validate(fields()[0], value);
      this.studentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'studentId' field has been set.
      * @return True if the 'studentId' field has been set, false otherwise.
      */
    public boolean hasStudentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'studentId' field.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder clearStudentId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'registrationNumber' field.
      * @return The value.
      */
    public java.lang.Integer getRegistrationNumber() {
      return registrationNumber;
    }

    /**
      * Sets the value of the 'registrationNumber' field.
      * @param value The value of 'registrationNumber'.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder setRegistrationNumber(int value) {
      validate(fields()[1], value);
      this.registrationNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'registrationNumber' field has been set.
      * @return True if the 'registrationNumber' field has been set, false otherwise.
      */
    public boolean hasRegistrationNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'registrationNumber' field.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder clearRegistrationNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.city = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder clearCity() {
      city = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }

    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.lastName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'tuitionCost' field.
      * @return The value.
      */
    public java.lang.Float getTuitionCost() {
      return tuitionCost;
    }

    /**
      * Sets the value of the 'tuitionCost' field.
      * @param value The value of 'tuitionCost'.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder setTuitionCost(float value) {
      validate(fields()[5], value);
      this.tuitionCost = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'tuitionCost' field has been set.
      * @return True if the 'tuitionCost' field has been set, false otherwise.
      */
    public boolean hasTuitionCost() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'tuitionCost' field.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder clearTuitionCost() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'monthlyPayment' field.
      * @return The value.
      */
    public java.lang.Float getMonthlyPayment() {
      return monthlyPayment;
    }

    /**
      * Sets the value of the 'monthlyPayment' field.
      * @param value The value of 'monthlyPayment'.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder setMonthlyPayment(float value) {
      validate(fields()[6], value);
      this.monthlyPayment = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'monthlyPayment' field has been set.
      * @return True if the 'monthlyPayment' field has been set, false otherwise.
      */
    public boolean hasMonthlyPayment() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'monthlyPayment' field.
      * @return This builder.
      */
    public com.curso.avro.kafka.spkafkaavrodemo.schema.StockHistory.Builder clearMonthlyPayment() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockHistory build() {
      try {
        StockHistory record = new StockHistory();
        record.studentId = fieldSetFlags()[0] ? this.studentId : (java.lang.Integer) defaultValue(fields()[0]);
        record.registrationNumber = fieldSetFlags()[1] ? this.registrationNumber : (java.lang.Integer) defaultValue(fields()[1]);
        record.city = fieldSetFlags()[2] ? this.city : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.lastName = fieldSetFlags()[4] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.tuitionCost = fieldSetFlags()[5] ? this.tuitionCost : (java.lang.Float) defaultValue(fields()[5]);
        record.monthlyPayment = fieldSetFlags()[6] ? this.monthlyPayment : (java.lang.Float) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockHistory>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockHistory>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockHistory>
    READER$ = (org.apache.avro.io.DatumReader<StockHistory>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
